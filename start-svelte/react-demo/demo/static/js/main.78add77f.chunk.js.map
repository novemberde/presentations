{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","e","container","current","title","target","value","length","items","colorClasses","n","Math","min","pow","height","clientHeight","width","clientWidth","counts","i","className","floor","random","push","setState","React","createRef","state","memory","maximum","bind","setInterval","round","window","performance","usedJSHeapSize","ref","this","type","onChange","map","item","key","style","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAyEeA,G,kBArEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAsBRC,aAAe,SAACC,GAYhB,IAXE,IAAMC,EAAY,EAAKA,UAAUC,QAC7BC,EAAQH,EAAEI,OAAOC,MACfC,EAASH,EAAQA,EAAMG,OAAS,EAClCC,EAAQ,GACNC,EAAe,EAAKA,aAEtBC,EAAIC,KAAKC,IAAID,KAAKE,IAAIN,EAAQ,GAAI,KAClCO,EAASZ,EAAUa,aAAeL,EAChCM,EAAQd,EAAUe,YAAcP,EAClCQ,EAASR,EAAIA,EAEVS,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAChC,IAAMC,EAAY,EAAKX,aAAaE,KAAKU,MAAMV,KAAKW,SAAWb,EAAaF,SAC5EC,EAAMe,KAAK,CAACT,SAAQE,QAAOI,cAE1B,EAAKI,SAAS,CACZpB,QACAI,WAvCF,EAAKN,UAAYuB,IAAMC,YACvB,EAAKC,MAAQ,CACXvB,MAAO,GACPI,MAAO,GACPoB,OAAQ,EACRC,QAAS,GAEX,EAAKpB,aAAe,CAAC,cAAe,gBAAiB,eAAgB,kBACrE,EAAKT,aAAe,EAAKA,aAAa8B,KAAlB,gBACpBC,aAAY,WACV,IAAMH,EAASjB,KAAKqB,MAAMC,OAAOC,YAAYN,OAAOO,eAAe,KAC7DR,EAAQ,CACZC,UAEE,EAAKD,MAAME,QAAUD,IACvBD,EAAME,QAAUD,GAElB,EAAKJ,SAASG,KACb,KApBc,E,sEA8CjB,OACE,yBAAKP,UAAU,YAAYgB,IAAKC,KAAKnC,WACnC,yBAAKkB,UAAU,aACf,yBAAKA,UAAU,YACb,2BAAOkB,KAAK,OAAOhC,MAAO+B,KAAKV,MAAMvB,MAAOmC,SAAUF,KAAKrC,eAC3D,yBAAKoB,UAAU,UAAf,iBAAuCiB,KAAKV,MAAMC,OAAlD,MACA,yBAAKR,UAAU,UAAf,kBAAwCiB,KAAKV,MAAME,QAAnD,OAGAQ,KAAKV,MAAMnB,MAAMgC,KAAI,SAACC,EAAMtB,GAC1B,OAAO,yBACLuB,IAAKvB,EACLwB,MAAO,CAAC7B,OAAO,GAAD,OAAK2B,EAAK3B,OAAV,MAAsBE,MAAM,GAAD,OAAKyB,EAAKzB,MAAV,OACzCI,UAAWqB,EAAKrB,oB,GA5DZK,IAAMmB,YCSJC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.78add77f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.container = React.createRef();\n    this.state = {\n      title: \"\",\n      items: [],\n      memory: 0,\n      maximum: 0,\n    }\n    this.colorClasses = ['dot primary', 'dot secondary', 'dot tertiary', 'dot quaternary']\n    this.handleChange = this.handleChange.bind(this)\n    setInterval(() => {\n      const memory = Math.round(window.performance.memory.usedJSHeapSize/1000000)\n      const state = {\n        memory,\n      }\n      if (this.state.maximum < memory) {\n        state.maximum = memory\n      }\n      this.setState(state)\n    }, 100)\n  }\n\n  handleChange = (e) => {\n    const container = this.container.current\n    let title = e.target.value\n    const length = title ? title.length : 0\n    let items = []\n    const colorClasses = this.colorClasses\n\n\t\tconst n = Math.min(Math.pow(length, 2), 100)\n\t\tconst height = container.clientHeight / n\n    const width = container.clientWidth / n\n\t\tconst counts = n * n\n\n\t\tfor (let i = 0; i < counts; i++) {\n\t\t\tconst className = this.colorClasses[Math.floor(Math.random() * colorClasses.length)]\n\t\t\titems.push({height, width, className})\n\t\t}\n    this.setState({\n      title,\n      items,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\" ref={this.container}>\n        <div className=\"progress\"></div>\n        <div className=\"my-input\">\n          <input type=\"text\" value={this.state.title} onChange={this.handleChange}/>\n          <div className=\"memory\">Memory Usage: {this.state.memory}MB</div>\n          <div className=\"memory\">Maximum Usage: {this.state.maximum}MB</div>\n        </div>\n        {\n          this.state.items.map((item, i) => {\n            return <div\n              key={i}\n              style={{height: `${item.height}px`, width: `${item.width}px`}}\n              className={item.className}>\n\n            </div>\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}